// Code generated by MockGen. DO NOT EDIT.
// Source: ./../../pkg/api/person_grpc.pb.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "gitlab.ozon.dev/igor.benko.1991/homework/pkg/api"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockPersonServiceClient is a mock of PersonServiceClient interface.
type MockPersonServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPersonServiceClientMockRecorder
}

// MockPersonServiceClientMockRecorder is the mock recorder for MockPersonServiceClient.
type MockPersonServiceClientMockRecorder struct {
	mock *MockPersonServiceClient
}

// NewMockPersonServiceClient creates a new mock instance.
func NewMockPersonServiceClient(ctrl *gomock.Controller) *MockPersonServiceClient {
	mock := &MockPersonServiceClient{ctrl: ctrl}
	mock.recorder = &MockPersonServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonServiceClient) EXPECT() *MockPersonServiceClientMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonServiceClient) CreatePerson(ctx context.Context, in *api.CreatePersonRequest, opts ...grpc.CallOption) (*api.CreatePersonResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePerson", varargs...)
	ret0, _ := ret[0].(*api.CreatePersonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonServiceClientMockRecorder) CreatePerson(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonServiceClient)(nil).CreatePerson), varargs...)
}

// DeletePerson mocks base method.
func (m *MockPersonServiceClient) DeletePerson(ctx context.Context, in *api.DeletePersonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePerson", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonServiceClientMockRecorder) DeletePerson(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonServiceClient)(nil).DeletePerson), varargs...)
}

// GetPerson mocks base method.
func (m *MockPersonServiceClient) GetPerson(ctx context.Context, in *api.GetPersonRequest, opts ...grpc.CallOption) (*api.GetPersonResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPerson", varargs...)
	ret0, _ := ret[0].(*api.GetPersonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockPersonServiceClientMockRecorder) GetPerson(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockPersonServiceClient)(nil).GetPerson), varargs...)
}

// ListPerson mocks base method.
func (m *MockPersonServiceClient) ListPerson(ctx context.Context, in *api.ListPersonRequest, opts ...grpc.CallOption) (api.PersonService_ListPersonClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPerson", varargs...)
	ret0, _ := ret[0].(api.PersonService_ListPersonClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPerson indicates an expected call of ListPerson.
func (mr *MockPersonServiceClientMockRecorder) ListPerson(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPerson", reflect.TypeOf((*MockPersonServiceClient)(nil).ListPerson), varargs...)
}

// UpdatePerson mocks base method.
func (m *MockPersonServiceClient) UpdatePerson(ctx context.Context, in *api.UpdatePersonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePerson", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonServiceClientMockRecorder) UpdatePerson(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonServiceClient)(nil).UpdatePerson), varargs...)
}

// MockPersonService_ListPersonClient is a mock of PersonService_ListPersonClient interface.
type MockPersonService_ListPersonClient struct {
	ctrl     *gomock.Controller
	recorder *MockPersonService_ListPersonClientMockRecorder
}

// MockPersonService_ListPersonClientMockRecorder is the mock recorder for MockPersonService_ListPersonClient.
type MockPersonService_ListPersonClientMockRecorder struct {
	mock *MockPersonService_ListPersonClient
}

// NewMockPersonService_ListPersonClient creates a new mock instance.
func NewMockPersonService_ListPersonClient(ctrl *gomock.Controller) *MockPersonService_ListPersonClient {
	mock := &MockPersonService_ListPersonClient{ctrl: ctrl}
	mock.recorder = &MockPersonService_ListPersonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonService_ListPersonClient) EXPECT() *MockPersonService_ListPersonClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPersonService_ListPersonClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPersonService_ListPersonClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPersonService_ListPersonClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPersonService_ListPersonClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPersonService_ListPersonClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPersonService_ListPersonClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPersonService_ListPersonClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPersonService_ListPersonClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPersonService_ListPersonClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPersonService_ListPersonClient) Recv() (*api.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPersonService_ListPersonClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPersonService_ListPersonClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPersonService_ListPersonClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPersonService_ListPersonClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPersonService_ListPersonClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPersonService_ListPersonClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPersonService_ListPersonClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPersonService_ListPersonClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPersonService_ListPersonClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPersonService_ListPersonClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPersonService_ListPersonClient)(nil).Trailer))
}

// MockPersonServiceServer is a mock of PersonServiceServer interface.
type MockPersonServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPersonServiceServerMockRecorder
}

// MockPersonServiceServerMockRecorder is the mock recorder for MockPersonServiceServer.
type MockPersonServiceServerMockRecorder struct {
	mock *MockPersonServiceServer
}

// NewMockPersonServiceServer creates a new mock instance.
func NewMockPersonServiceServer(ctrl *gomock.Controller) *MockPersonServiceServer {
	mock := &MockPersonServiceServer{ctrl: ctrl}
	mock.recorder = &MockPersonServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonServiceServer) EXPECT() *MockPersonServiceServerMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonServiceServer) CreatePerson(arg0 context.Context, arg1 *api.CreatePersonRequest) (*api.CreatePersonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", arg0, arg1)
	ret0, _ := ret[0].(*api.CreatePersonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonServiceServerMockRecorder) CreatePerson(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonServiceServer)(nil).CreatePerson), arg0, arg1)
}

// DeletePerson mocks base method.
func (m *MockPersonServiceServer) DeletePerson(arg0 context.Context, arg1 *api.DeletePersonRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonServiceServerMockRecorder) DeletePerson(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonServiceServer)(nil).DeletePerson), arg0, arg1)
}

// GetPerson mocks base method.
func (m *MockPersonServiceServer) GetPerson(arg0 context.Context, arg1 *api.GetPersonRequest) (*api.GetPersonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerson", arg0, arg1)
	ret0, _ := ret[0].(*api.GetPersonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockPersonServiceServerMockRecorder) GetPerson(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockPersonServiceServer)(nil).GetPerson), arg0, arg1)
}

// ListPerson mocks base method.
func (m *MockPersonServiceServer) ListPerson(arg0 *api.ListPersonRequest, arg1 api.PersonService_ListPersonServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPerson", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPerson indicates an expected call of ListPerson.
func (mr *MockPersonServiceServerMockRecorder) ListPerson(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPerson", reflect.TypeOf((*MockPersonServiceServer)(nil).ListPerson), arg0, arg1)
}

// UpdatePerson mocks base method.
func (m *MockPersonServiceServer) UpdatePerson(arg0 context.Context, arg1 *api.UpdatePersonRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonServiceServerMockRecorder) UpdatePerson(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonServiceServer)(nil).UpdatePerson), arg0, arg1)
}

// mustEmbedUnimplementedPersonServiceServer mocks base method.
func (m *MockPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPersonServiceServer")
}

// mustEmbedUnimplementedPersonServiceServer indicates an expected call of mustEmbedUnimplementedPersonServiceServer.
func (mr *MockPersonServiceServerMockRecorder) mustEmbedUnimplementedPersonServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPersonServiceServer", reflect.TypeOf((*MockPersonServiceServer)(nil).mustEmbedUnimplementedPersonServiceServer))
}

// MockUnsafePersonServiceServer is a mock of UnsafePersonServiceServer interface.
type MockUnsafePersonServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePersonServiceServerMockRecorder
}

// MockUnsafePersonServiceServerMockRecorder is the mock recorder for MockUnsafePersonServiceServer.
type MockUnsafePersonServiceServerMockRecorder struct {
	mock *MockUnsafePersonServiceServer
}

// NewMockUnsafePersonServiceServer creates a new mock instance.
func NewMockUnsafePersonServiceServer(ctrl *gomock.Controller) *MockUnsafePersonServiceServer {
	mock := &MockUnsafePersonServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePersonServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePersonServiceServer) EXPECT() *MockUnsafePersonServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPersonServiceServer mocks base method.
func (m *MockUnsafePersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPersonServiceServer")
}

// mustEmbedUnimplementedPersonServiceServer indicates an expected call of mustEmbedUnimplementedPersonServiceServer.
func (mr *MockUnsafePersonServiceServerMockRecorder) mustEmbedUnimplementedPersonServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPersonServiceServer", reflect.TypeOf((*MockUnsafePersonServiceServer)(nil).mustEmbedUnimplementedPersonServiceServer))
}

// MockPersonService_ListPersonServer is a mock of PersonService_ListPersonServer interface.
type MockPersonService_ListPersonServer struct {
	ctrl     *gomock.Controller
	recorder *MockPersonService_ListPersonServerMockRecorder
}

// MockPersonService_ListPersonServerMockRecorder is the mock recorder for MockPersonService_ListPersonServer.
type MockPersonService_ListPersonServerMockRecorder struct {
	mock *MockPersonService_ListPersonServer
}

// NewMockPersonService_ListPersonServer creates a new mock instance.
func NewMockPersonService_ListPersonServer(ctrl *gomock.Controller) *MockPersonService_ListPersonServer {
	mock := &MockPersonService_ListPersonServer{ctrl: ctrl}
	mock.recorder = &MockPersonService_ListPersonServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonService_ListPersonServer) EXPECT() *MockPersonService_ListPersonServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPersonService_ListPersonServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPersonService_ListPersonServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPersonService_ListPersonServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPersonService_ListPersonServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPersonService_ListPersonServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPersonService_ListPersonServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPersonService_ListPersonServer) Send(arg0 *api.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPersonService_ListPersonServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPersonService_ListPersonServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPersonService_ListPersonServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPersonService_ListPersonServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPersonService_ListPersonServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPersonService_ListPersonServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPersonService_ListPersonServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPersonService_ListPersonServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPersonService_ListPersonServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPersonService_ListPersonServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPersonService_ListPersonServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPersonService_ListPersonServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPersonService_ListPersonServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPersonService_ListPersonServer)(nil).SetTrailer), arg0)
}
